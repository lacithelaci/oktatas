Search.setIndex({"docnames": ["index", "model", "queries", "repository"], "filenames": ["index.rst", "model.rst", "queries.rst", "repository.rst"], "titles": ["Welcome to country-repository\u2019s documentation!", "Model", "Basic Queries", "Repository"], "terms": {"model": [0, 2, 3], "basic": 0, "queri": 0, "sort": 0, "collect": [], "aggreg": 0, "index": 0, "modul": 0, "search": 0, "page": 0, "class": [1, 2, 3], "countri": [1, 2, 3], "base": [1, 2, 3], "name": [1, 2], "str": [1, 2, 3], "popul": [1, 2], "int": [1, 2], "translat": 1, "dict": [1, 2, 3], "timezon": 1, "list": [1, 2], "independ": 1, "bool": [1, 2], "area": 1, "none": [1, 2], "capit": [1, 2], "region": [1, 2], "code": [1, 2], "repres": [1, 3], "valu": [1, 2, 3], "africa": 1, "america": 1, "antarct": 1, "antarctic_ocean": 1, "ocean": 1, "asia": 1, "europ": 1, "oceania": 1, "polar": 1, "whether": [1, 2], "i": [1, 2], "basiccountryqueri": 2, "defin": 2, "countryrepositori": [2, 3], "abstract": 2, "get_average_popul": 2, "float": 2, "return": [2, 3], "averag": 2, "get_capitals_order_by_name_desc": 2, "each": 2, "descend": 2, "order": 2, "get_count_of_countries_of_region": 2, "count": 2, "ar": 2, "locat": 2, "given": 2, "contin": 2, "paramet": [2, 3], "get_count_of_european_countri": 2, "european": 2, "get_countries_below_population_limit": 2, "limit": 2, "set": 2, "which": 2, "less": 2, "than": 2, "get_countries_by_popul": 2, "lower_bound": 2, "upper_bound": 2, "option": 2, "ha": 2, "between": 2, "bound": 2, "inclus": 2, "lower": 2, "upper": 2, "get_country_by_cod": 2, "get_distinct_capit": 2, "contain": 2, "all": 2, "distinct": 2, "get_distinct_nam": 2, "get_distinct_populations_by_region": 2, "belong": 2, "get_first_country_by_starting_lett": 2, "letter": 2, "first": 2, "start": 2, "get_greatest_popul": 2, "greatest": 2, "get_most_populous_country_by_region": 2, "its": 2, "get_population_by_region": 2, "is_population_exist": 2, "exist": 2, "have": 2, "result": 2, "sortingcountryqueri": 2, "get_countries_order_by_length_of_capital_then_by_capit": 2, "length": 2, "get_countries_order_by_length_of_capital_then_by_population_desc": 2, "get_countries_order_by_population_desc": 2, "aggregationcountryqueri": 2, "deal": 2, "get_count_of_countries_by_region": 2, "dictionari": [2, 3], "map": [2, 3], "get_countries_by_cod": 2, "correspond": [2, 3], "get_countries_by_first_letters_and_region": 2, "occur": 2, "place": 2, "get_countries_by_region": 2, "get_countries_by_regions_and_cod": 2, "get_countries_by_regions_and_first_lett": 2, "get_countries_by_regions_filter_by_popul": 2, "get_countries_by_regions_order_by_capit": 2, "get_first_localized_countries_by_region": 2, "local": 2, "get_first_localized_country_names_by_region": 2, "get_localized_country_names_by_region": 2, "us": 2, "most": 2, "path": 3, "read": 3, "store": 3, "data": 3, "properti": 3, "view": 3, "static": 3, "type_mapp": 3, "ani": 3, "thw": 3, "node": 3, "json": 3, "document": 3, "type": 3, "actual": 3, "object": 3}, "objects": {"countries.base.model": [[1, 0, 1, "", "Country"]], "countries.base.model.Country": [[1, 0, 1, "", "Region"], [1, 1, 1, "", "area"], [1, 1, 1, "", "capital"], [1, 1, 1, "", "code"], [1, 1, 1, "", "independent"], [1, 1, 1, "", "name"], [1, 1, 1, "", "population"], [1, 1, 1, "", "region"], [1, 1, 1, "", "timezones"], [1, 1, 1, "", "translations"]], "countries.base.queries": [[2, 0, 1, "", "AggregationCountryQueries"], [2, 0, 1, "", "BasicCountryQueries"], [2, 0, 1, "", "SortingCountryQueries"]], "countries.base.queries.AggregationCountryQueries": [[2, 2, 1, "", "get_count_of_countries_by_regions"], [2, 2, 1, "", "get_countries_by_codes"], [2, 2, 1, "", "get_countries_by_first_letters_and_regions"], [2, 2, 1, "", "get_countries_by_regions"], [2, 2, 1, "", "get_countries_by_regions_and_codes"], [2, 2, 1, "", "get_countries_by_regions_and_first_letters"], [2, 2, 1, "", "get_countries_by_regions_filter_by_population"], [2, 2, 1, "", "get_countries_by_regions_order_by_capitals"], [2, 2, 1, "", "get_first_localized_countries_by_regions"], [2, 2, 1, "", "get_first_localized_country_names_by_regions"], [2, 2, 1, "", "get_localized_country_names_by_regions"], [2, 2, 1, "", "get_most_populous_country_by_regions"]], "countries.base.queries.BasicCountryQueries": [[2, 2, 1, "", "get_average_population"], [2, 2, 1, "", "get_count_of_countries_of_region"], [2, 2, 1, "", "get_count_of_european_countries"], [2, 2, 1, "", "get_countries_below_population_limit"], [2, 2, 1, "", "get_countries_by_population"], [2, 2, 1, "", "get_country_by_code"], [2, 2, 1, "", "get_distinct_capitals"], [2, 2, 1, "", "get_distinct_names"], [2, 2, 1, "", "get_distinct_populations_by_region"], [2, 2, 1, "", "get_first_country_by_starting_letter"], [2, 2, 1, "", "get_greatest_population"], [2, 2, 1, "", "get_most_populous_country_by_region"], [2, 2, 1, "", "get_population_by_region"], [2, 2, 1, "", "is_population_exists"]], "countries.base.queries.SortingCountryQueries": [[2, 2, 1, "", "get_capitals_order_by_name_desc"], [2, 2, 1, "", "get_countries_order_by_length_of_capital_then_by_capital"], [2, 2, 1, "", "get_countries_order_by_length_of_capital_then_by_population_desc"], [2, 2, 1, "", "get_countries_order_by_population_desc"]], "countries.base.repository": [[3, 0, 1, "", "CountryRepository"]], "countries.base.repository.CountryRepository": [[3, 3, 1, "", "countries"], [3, 2, 1, "", "type_mapper"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "countri": 0, "repositori": [0, 3], "": 0, "document": 0, "content": 0, "indic": 0, "tabl": 0, "model": 1, "basic": 2, "queri": 2, "sort": 2, "collect": [], "aggreg": 2}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 56}})